import os
import json
import telebot
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime, timedelta
import re
import threading
import time
import schedule
import calendar
from flask import Flask
import requests

app = Flask(__name__)

@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ"

# üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
creds_json = os.getenv("GOOGLE_CREDENTIALS")
creds_dict = json.loads(creds_json)
scopes = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]
creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
client = gspread.authorize(creds)
SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
spreadsheet = client.open_by_key(SHEET_ID)

# ü§ñ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç
TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = telebot.TeleBot(TOKEN)

# üîí –î–æ—Å—Ç—É–ø
ALLOWED_USERS = [476791477, 1388487185]
REPORT_CHAT_IDS = [476791477, 1388487185]

CATEGORIES = {
    "–ï–¥–∞": ["–µ–¥–∞", "–º–∞–Ω—Ç—ã", "–∫–∞—Ñ–µ", "–æ–±–µ–¥", "–ø—Ä–æ–¥—É–∫—Ç—ã", "—É–∂–∏–Ω"],
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["—Ç–∞–∫—Å–∏", "–∞–≤—Ç–æ–±—É—Å", "–±–µ–Ω–∑–∏–Ω", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ø—Ä–æ–µ–∑–¥"],
    "–ö–æ–º–º—É–Ω–∞–ª–∫–∞": ["—Å–≤–µ—Ç", "–≥–∞–∑", "–∂–∫—Ö", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–≤–æ–¥–∞", "–∫–æ–º–º—É–Ω–∞–ª–∫–∞", "–∫–≤–∞—Ä–ø–ª–∞—Ç–∞"],
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–∫–∏–Ω–æ", "–∏–≥—Ä–∞", "—Ç–µ–∞—Ç—Ä", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"],
    "–î—Ä—É–≥–æ–µ": []
}

def send_to_all(text):
    for chat_id in REPORT_CHAT_IDS:
        try:
            bot.send_message(chat_id, text)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {e}")

def detect_category(text):
    text_lower = text.lower()
    for category, keywords in CATEGORIES.items():
        for word in keywords:
            if word in text_lower:
                return category
    return "–î—Ä—É–≥–æ–µ"

def get_current_worksheet():
    month_name = datetime.now().strftime("%B")
    try:
        return spreadsheet.worksheet(month_name)
    except gspread.exceptions.WorksheetNotFound:
        ws = spreadsheet.add_worksheet(title=month_name, rows="1000", cols="10")
        ws.append_row(["–î–∞—Ç–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–°—É–º–º–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
        return ws

# === –ê–≤—Ç–æ–æ—Ç—á—ë—Ç—ã ===
def send_daily_report():
    try:
        worksheet = get_current_worksheet()
        today = datetime.now().strftime("%d.%m.%Y")
        all_records = worksheet.get_all_values()[1:]
        today_sum = sum(int(row[2]) for row in all_records if row[0] == today)
        send_to_all(f"üåô –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç –∑–∞ {today}:\n–ü–æ—Ç—Ä–∞—Ç–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è ‚Äî {today_sum} ‚Ç∏")
    except Exception as e:
        send_to_all(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –æ—Ç—á—ë—Ç–µ: {e}")

def send_weekly_report():
    try:
        worksheet = get_current_worksheet()
        today = datetime.now()
        week_ago = today - timedelta(days=7)
        all_records = worksheet.get_all_values()[1:]
        week_sum = 0
        for row in all_records:
            date_obj = datetime.strptime(row[0], "%d.%m.%Y")
            if week_ago <= date_obj <= today:
                week_sum += int(row[2])
        send_to_all(f"üìÖ –ò—Ç–æ–≥ –∑–∞ –Ω–µ–¥–µ–ª—é (–¥–æ {today.strftime('%d.%m.%Y')}):\n{week_sum} ‚Ç∏")
    except Exception as e:
        send_to_all(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –Ω–µ–¥–µ–ª—å–Ω–æ–º –æ—Ç—á—ë—Ç–µ: {e}")

def send_monthly_report():
    try:
        worksheet = get_current_worksheet()
        today = datetime.now()
        month = today.strftime("%m.%Y")
        all_records = worksheet.get_all_values()[1:]
        month_sum = sum(int(row[2]) for row in all_records if month in row[0])
        send_to_all(f"üìä –ò—Ç–æ–≥ –∑–∞ –º–µ—Å—è—Ü {today.strftime('%B')}:\n{month_sum} ‚Ç∏")
    except Exception as e:
        send_to_all(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –º–µ—Å—è—á–Ω–æ–º –æ—Ç—á—ë—Ç–µ: {e}")

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
schedule.every().day.at("22:00").do(send_daily_report)
schedule.every().sunday.at("22:30").do(send_weekly_report)
schedule.every().day.at("23:59").do(
    lambda: send_monthly_report() if datetime.now().day == calendar.monthrange(datetime.now().year, datetime.now().month)[1] else None
)

def schedule_checker():
    while True:
        schedule.run_pending()
        time.sleep(30)

threading.Thread(target=schedule_checker, daemon=True).start()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ===
@bot.message_handler(commands=['id'])
def send_id(message):
    bot.reply_to(message, f"–í–∞—à chat_id: {message.chat.id}")

@bot.message_handler(commands=['report'])
def report(message):
    if message.chat.id not in ALLOWED_USERS:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    try:
        worksheet = get_current_worksheet()
        today = datetime.now().strftime("%d.%m.%Y")
        month = datetime.now().strftime("%m.%Y")
        all_records = worksheet.get_all_values()[1:]
        today_sum = sum(int(row[2]) for row in all_records if row[0] == today)
        month_sum = sum(int(row[2]) for row in all_records if month in row[0])
        bot.reply_to(message, f"üìä –û—Ç—á—ë—Ç:\n–°–µ–≥–æ–¥–Ω—è ({today}) ‚Äî {today_sum} ‚Ç∏\n–ó–∞ –º–µ—Å—è—Ü ‚Äî {month_sum} ‚Ç∏")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ /report: {e}")

@bot.message_handler(func=lambda m: True)
def add_or_auto(message):
    if message.chat.id not in ALLOWED_USERS:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    try:
        amount_match = re.search(r'\d+', message.text)
        if not amount_match:
            bot.reply_to(message, "‚ö†Ô∏è –£–∫–∞–∂–∏ —Å—É–º–º—É.")
            return
        amount = amount_match.group()
        comment = message.text.replace(amount, "").strip()
        category = detect_category(message.text)
    except:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ –ø–æ–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π —Ñ–æ—Ä–º–∞—Ç: /add –ö–∞—Ç–µ–≥–æ—Ä–∏—è –°—É–º–º–∞ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        return
    today = datetime.now().strftime("%d.%m.%Y")
    worksheet = get_current_worksheet()
    worksheet.append_row([today, category, amount, comment])
    bot.reply_to(message, f"‚úÖ –ó–∞–ø–∏—Å—å: {category} ‚Äî {amount} ‚Ç∏ ({comment})")

# === Keep-alive ping ===
def keep_alive_ping():
    while True:
        try:
            url = os.getenv("RENDER_URL", "https://budgbot.onrender.com")
            requests.get(url)
            print(f"üîÑ Keep-alive ping {url}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ keep-alive: {e}")
        time.sleep(600)

threading.Thread(target=keep_alive_ping, daemon=True).start()

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    # –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ (–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ 409 Conflict)
    if os.environ.get("WERKZEUG_RUN_MAIN") == "true":
        threading.Thread(target=lambda: bot.infinity_polling(), daemon=True).start()
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å Flask")

    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))